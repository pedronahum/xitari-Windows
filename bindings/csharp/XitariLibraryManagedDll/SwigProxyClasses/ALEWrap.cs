//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.10
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace Xitari {

public class ALEWrap : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal ALEWrap(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ALEWrap obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~ALEWrap() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          XitariLibPINVOKE.delete_ALEWrap(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public ALEWrap(string rom_file) : this(XitariLibPINVOKE.new_ALEWrap(rom_file), true) {
  }

  public static void ale_fillRgbFromPalette(SWIGTYPE_p_unsigned_char rgb, SWIGTYPE_p_unsigned_char obs, uint rgb_size, uint obs_size) {
    XitariLibPINVOKE.ALEWrap_ale_fillRgbFromPalette(SWIGTYPE_p_unsigned_char.getCPtr(rgb), SWIGTYPE_p_unsigned_char.getCPtr(obs), rgb_size, obs_size);
  }

  public void ale_gc() {
    XitariLibPINVOKE.ALEWrap_ale_gc(swigCPtr);
  }

  public double ale_act(int action) {
    double ret = XitariLibPINVOKE.ALEWrap_ale_act(swigCPtr, action);
    return ret;
  }

  public int ale_getScreenWidth() {
    int ret = XitariLibPINVOKE.ALEWrap_ale_getScreenWidth(swigCPtr);
    return ret;
  }

  public int ale_getScreenHeight() {
    int ret = XitariLibPINVOKE.ALEWrap_ale_getScreenHeight(swigCPtr);
    return ret;
  }

  public bool ale_isGameOver() {
    bool ret = XitariLibPINVOKE.ALEWrap_ale_isGameOver(swigCPtr);
    return ret;
  }

  public void ale_resetGame() {
    XitariLibPINVOKE.ALEWrap_ale_resetGame(swigCPtr);
  }

  public void ale_saveState() {
    XitariLibPINVOKE.ALEWrap_ale_saveState(swigCPtr);
  }

  public bool ale_loadState() {
    bool ret = XitariLibPINVOKE.ALEWrap_ale_loadState(swigCPtr);
    return ret;
  }

  public void ale_fillObs(SWIGTYPE_p_unsigned_char obs, uint obs_size) {
    XitariLibPINVOKE.ALEWrap_ale_fillObs(swigCPtr, SWIGTYPE_p_unsigned_char.getCPtr(obs), obs_size);
  }

  public void ale_fillRamObs(SWIGTYPE_p_unsigned_char ram, uint ram_size) {
    XitariLibPINVOKE.ALEWrap_ale_fillRamObs(swigCPtr, SWIGTYPE_p_unsigned_char.getCPtr(ram), ram_size);
  }

  public int ale_numLegalActions() {
    int ret = XitariLibPINVOKE.ALEWrap_ale_numLegalActions(swigCPtr);
    return ret;
  }

  public IntVector ale_legalActions(uint actions_size) {
    IntVector ret = new IntVector(XitariLibPINVOKE.ALEWrap_ale_legalActions(swigCPtr, actions_size), true);
    return ret;
  }

  public int ale_livesRemained() {
    int ret = XitariLibPINVOKE.ALEWrap_ale_livesRemained(swigCPtr);
    return ret;
  }

  public int ale_getSnapshotLength() {
    int ret = XitariLibPINVOKE.ALEWrap_ale_getSnapshotLength(swigCPtr);
    return ret;
  }

  public void ale_saveSnapshot(SWIGTYPE_p_unsigned_char data, uint length) {
    XitariLibPINVOKE.ALEWrap_ale_saveSnapshot(swigCPtr, SWIGTYPE_p_unsigned_char.getCPtr(data), length);
  }

  public void ale_restoreSnapshot(SWIGTYPE_p_unsigned_char snapshot, uint size) {
    XitariLibPINVOKE.ALEWrap_ale_restoreSnapshot(swigCPtr, SWIGTYPE_p_unsigned_char.getCPtr(snapshot), size);
  }

}

}
